@using SCA.Areas.Monitoring.Models
@model SCA.Areas.Monitoring.Models.SiteModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Kendo().TextBoxFor(model => model.Id).HtmlAttributes(new { @style = "display: none" })
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Name)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Comment)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Url, new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Url)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Company, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Company)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Domains, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Domains)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @(Html.Kendo().Grid<SitePageModel>()
                .Name("grid")
                .Columns(columns =>
                {
                    columns.Bound(c => c.Id).Hidden(true);
                    columns.Bound(c => c).Filterable(false).Sortable(false).Title("<div><input type='checkbox'></div>").Width(50);
                    columns.Bound(c => c.PageName).Title("Название").Width(150);
                    columns.Bound(c => c.RelatedUrl).Title("Относительный Url").Width(120);
                    columns.Bound(c => c.Tag).Title("Теги").Width(150); ;
                    //columns.Bound(c => c.Name).Title("Действия").Width(120); ;

                })
                .Filterable()
                .ColumnMenu(c => c.Columns(false))
                .Resizable(resizable => resizable.Columns(true))
                .Reorderable(reorderable => reorderable.Columns(true))
                .Scrollable()
                .Sortable()
                .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))

                .DataSource(dataSource => dataSource
                    .Ajax()

                    .Read(read => read.Action("PageList", "Site", new { id = Model.Id }))
                )
                )
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "List")
</div>
