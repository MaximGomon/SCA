@model SCA.Areas.Monitoring.Models.CompanyModel
<script>
    function onOwnerData() {
        return {
            text: $("#OwnerAutoComplete").val()
        };
    }
</script>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>SiteModel</h4>
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Comment)
                @Html.ValidationMessageFor(model => model.Comment, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @(Html.Kendo().DropDownList()
                      .Name("StatusId")
                      .DataTextField("Name")
                      .DataValueField("Id")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetCompanyStatus", "Companies");
                          });
                      })
                      )
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Size, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @(Html.Kendo().DropDownList()
                      .Name("SizeId")
                      .DataTextField("Name")
                      .DataValueField("Id")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetCompanySize", "Companies");
                          });
                      })
                      )
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RelationType, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @(Html.Kendo().DropDownList()
                      .Name("SizeId")
                      .DataTextField("Name")
                      .DataValueField("Id")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetCompanyRelation", "Companies");
                          });
                      })
                      )
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sector, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @(Html.Kendo().DropDownList()
                      .Name("SectorId")
                      .DataTextField("Name")
                      .DataValueField("Id")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetCompanySector", "Companies");
                          });
                      })
                      )
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OwnerName, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @(Html.Kendo().AutoComplete()
                      .Name("OwnerAutoComplete")
                      .DataTextField("Name")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                              read.Action("GetOwnersContains", "Companies")
                              .Data("onOwnerData");
                          })
                              .ServerFiltering(true);
                      })
                      )
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>

}
<div>
    @Html.ActionLink("Back to List", "List")
</div>