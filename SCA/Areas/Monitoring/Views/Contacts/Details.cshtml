@using SCA.Areas.Monitoring.Models
@model SCA.Areas.Monitoring.Models.ContactModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>
            @Html.LabelFor(model => model.ReadyToBuyScore, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().NumericTextBoxFor(model => model.ReadyToBuyScore)
                @Html.ValidationMessageFor(model => model.ReadyToBuyScore, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email, "", new {@class = "text-danger"})
            </div>
            @Html.LabelFor(model => model.AgeCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.AgeDirection))
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.Status))
            </div>
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().DatePickerFor(model => model.BirthDate)
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReadyToSell, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.ReadyToSell))
            </div>
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Comment)
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.CompanyName))
            </div>
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.Gender))
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.ReadyToBuyScore, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().NumericTextBoxFor(model => model.ReadyToBuyScore)
                @Html.ValidationMessageFor(model => model.ReadyToBuyScore, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.AgeCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.AgeDirection))
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().DatePickerFor(model => model.BirthDate)
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Kendo().TextBoxFor(model => model.Comment)
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.Gender))
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.ContactType, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-4">
                @(Html.Kendo().TextBoxFor(x => x.ContactType))
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                @(Html.Kendo().Grid<ActivityModel>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        //columns.Bound(c => c).Filterable(false).Sortable(false).Title("<div><input type='checkbox'></div>").Width(50);
                        columns.Bound(c => c.ActivityDateAsString).Title("Дата действия").Width(150);
                        columns.Bound(c => c.Type).Title("Тип").Width(50);
                        columns.Bound(c => c.Tags).Title("Теги").Width(120);
                        columns.Bound(c => c.UserAgent).Title("Браузер").Width(180);
                    })
                    .Filterable()
                    .ColumnMenu(c => c.Columns(false))
                    .Resizable(resizable => resizable.Columns(true))
                    .Reorderable(reorderable => reorderable.Columns(true))
                    .Scrollable()
                    .Sortable()
                    .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))

                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("List_Read", "ContactActivity", new { id = Model.Id }))
                    )
                )
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "List", null, new { @class = "btn btn-default" })
</div>
